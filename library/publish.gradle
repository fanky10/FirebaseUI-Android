apply plugin: 'maven-publish'
apply from: "../common/constants.gradle"

archivesBaseName = 'firebase-ui'

/**
 * Returns list of tasks names that prepareArtfacts should depend on.
 */
def prepareArtifactsTasks() {
    return project.ext.submodules.collect { name ->
        ":${name}:prepareArtifacts"
    }.toArray()
}

/**
 * Returns list of publish tasks that monolith publish tasks should depend on.
 * @param repo relevant repository, such as 'MavenLocal' or 'CustomLocalRepository'
 */
def publishToRepoTasks(repo) {
    return project.ext.submodules.collect { name ->
        // Ex: name = database, repo = MavenLocal
        // Return: :database:publishDatabaseLibraryPublicationToMavenLocal
        ":${name}:publish${name.capitalize()}LibraryPublicationTo${repo}"
    }.toArray()
}

/**
 * Returns a list of task names to upload modules to bintray.
 */
def bintrayUploadTasks() {
    return project.ext.submodules.collect { name ->
        ":${name}:bintrayUpload"
    }.toArray()
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/**
 * Prepare artifacts for this an all sub-projects.
 */
task prepareArtifacts(dependsOn: [
        javadocJar,
        sourcesJar,
        assembleRelease,
        prepareArtifactsTasks()]) {

}

/**
 * Publish all artifacts to the maven local repository.
 */
task publishAllToMavenLocal(dependsOn: [
        'publishMonolithLibraryPublicationToMavenLocal',
        publishToRepoTasks('MavenLocal')]) {

}

/**
 * Publish all artifacts to the customLocal repository.
 */
task publishAllToCustomLocal(dependsOn: [
        'publishMonolithLibraryPublicationToCustomLocalRepository',
        publishToRepoTasks('CustomLocalRepository')]) {

}

/**
 * Upload all artifacts to bintray.
 */
task bintrayUploadAll(dependsOn: [
        'bintrayUpload',
        bintrayUploadTasks()]) {

}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {

    publications {
        monolithLibrary(MavenPublication) {
            groupId project.ext.group
            artifactId archivesBaseName
            version project.ext.version

            artifact "$buildDir/outputs/aar/$archivesBaseName-release.aar"
            artifact javadocJar
            artifact sourcesJar

            // Monolith is just a POM that depends on the others
            pom.withXml {
                def dependenciesNode = asNode().getAt("dependencies")[0]
                if (dependenciesNode == null) {
                    dependenciesNode = asNode().appendNode("dependencies");
                }

                // Add a maven dependency on each submodule
                project.ext.submodules.each { module ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', project.ext.group)
                    dependencyNode.appendNode('artifactId', module)
                    dependencyNode.appendNode('version', project.ext.version)
                }
            }
        }
    }

    // By passing -Pcustom_local=/some/path and running the
    // publishLibraryPublicationToCustomLocalRepository task you can publish this library to a
    // custom maven repository location on your machine.
    repositories {
        maven {
            name 'CustomLocal'
            url uri(project.hasProperty('custom_local') ? project.getProperty('custom_local') : '/tmp/')
        }
    }


}
